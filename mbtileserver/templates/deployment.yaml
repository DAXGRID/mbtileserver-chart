apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ .Release.Name }}-{{ .Chart.Name }}
  labels:
    app: {{ .Release.Name }}-{{ .Chart.Name }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ .Release.Name }}-{{ .Chart.Name }}
  template:
    metadata:
      labels:
        app: {{ .Release.Name }}-{{ .Chart.Name }}
    spec:
      shareProcessNamespace: true
      {{ if (eq .Values.storage.enabled true) }}
      volumes:
        - name: {{ .Release.Name }}-{{ .Chart.Name }}-data
          persistentVolumeClaim:
            claimName: {{ .Release.Name }}-{{ .Chart.Name }}
      {{ end }}
      containers:
        - name: {{ .Release.Name }}-{{ .Chart.Name }}
          image: {{ .Values.image.repository }}:{{ .Values.image.tag }}
          ports:
            - containerPort: 8000
          {{ if (eq .Values.storage.enabled true) }}
          volumeMounts:
            - name: {{ .Release.Name }}-{{ .Chart.Name }}-data
              mountPath: {{ .Values.storage.path }}
          {{ end }}
          args:
            {{- range .Values.commandArgs }}
            - {{ . }}
            {{- end }}
          readinessProbe:
            httpGet:
              path: /services
              port: 8000
            initialDelaySeconds: 3
            periodSeconds: 3
          livenessProbe:
            httpGet:
              path: /services
              port: 8000
            initialDelaySeconds: 5
            periodSeconds: 5
        {{ if (eq .Values.reload.enabled true) }}
        - name: {{ .Release.Name }}-{{ .Chart.Name }}-inotify
          image: openftth/inotify-tools:v3.20.11.0-r0
          {{ if (eq .Values.storage.enabled true) }}
          volumeMounts:
            - name: {{ .Release.Name }}-{{ .Chart.Name }}-data
              mountPath: {{ .Values.storage.path }}
          {{ end }}
          securityContext:
            capabilities:
              add:
                - SYS_PTRACE
          command:
            - "/bin/sh"
            - "-c"
            - "while inotifywait --include '.*.mbtiles' {{ .Values.reload.watchPath }} -e create,delete,modify; do { kill -HUP $(pgrep mbtileserver); }; done"
        {{ end }}
      restartPolicy: Always
